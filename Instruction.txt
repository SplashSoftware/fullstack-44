Required Skills:
JavaScript, NodeJS, NextJS, ExpressJS, WebSocket, Canvas, MongoDB

Recommended Skills:
For the gameplay part you can use GSAP, PixieJS, ThreeJS, …

Instructions
In this assessment, you are required to create a multiplayer game. This game is based on mathematics.
Game starts with 5 players (1 the actual user and 4 computer-managed player) and each player has a credit of 100.
Each round a random number between 0 to 9.99 with 0.01 steps should be generated in the back-end. Let’s call it SecretNumber because we don’t want to impose it to the players.
Players will guess the SecretNumber and place their GuessedNumber before the round get started.
When the round starts, 10 credit will be deducted from each user’s credit balance, a growing graph starts animating from 0 to the SecretNumber. When after the round, for each player if it’s GuessedNumber is smaller than the SecretNumber, he will win by his GuessedNumber multiplied by 10 (player deducted credit), otherwise he loses his 10 credits.

Example:
ROUND1
Player_1: Credit: 100, GuessedNumber: 1.5
Player_2: Credit: 100, GuessedNumber: 2
Player_3: Credit: 100, GuessedNumber: 3
Player_4: Credit: 100, GuessedNumber: 5
Player_5: Credit: 100, GuessedNumber: 7

ROUND1 STARTS: (SecretNumber = 2.85)
Player_1: Credit: 90, GuessedNumber: 1.5
Player_2: Credit: 90, GuessedNumber: 2
Player_3: Credit: 90, GuessedNumber: 3
Player_4: Credit: 90, GuessedNumber: 5
Player_5: Credit: 90, GuessedNumber: 7

ROUND1 ENDS (Results):
Player_1: Credit: 105, GuessedNumber: 1.5 (Won 1.5 * 10)
Player_2: Credit: 110, GuessedNumber: 2 (Won 2 * 10)
Player_3: Credit: 90, GuessedNumber: 3 (Lost)
Player_4: Credit: 90, GuessedNumber: 5 (Lost)
Player_5: Credit: 90, GuessedNumber: 7 (Lost)


One of the players should be the real user, interacting with UI and submitting his GuessedNumber via a simple form (API or Socket).

Requirements:
- A Random Number Generating algorithm to generate pseudo-random numbers between 0 to 9.99.
- A persistent socket connection between Server and Client to start, stop and reset the animating graph.
- A form for real user to submit his GuessedNumber.
- An exponentially growing animating graph in canvas.
- Reset the graph after each round.
- Generate 4 random GuessedNumbers on behalf of computer-managed players.
- Update players credits after each round start and end.
- All calculations should be in server side.
- Use DB to maintain users’ credits and rounds history (SeretNumber, GuessedNumbers)
- Consider a 10 second delay between each round.
- Do not impose SecretNumber to the front-end until round finishes.
- Show the SecretNumber and the result list, after the round ends, data should be emited from the Server to the Client.

Hints:
Try your best to write the codes as clean as possible, the way you code is as important as the final result.
Write appropriate comments.
